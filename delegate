using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Delegate
{
    delegate int NumberChanger(int n);
    class Program
    {
        static int num = 10;
        static void Main(string[] args)
        {
            //AddNum(25);
            //1.C#通过委托调用静态方法
            //NumberChanger nc1 = new NumberChanger(AddNum);
            //nc1(25);            
            //Console.WriteLine("Value of Num:{0}", num);
            //Console.ReadLine();
            //2.C#通过委托调用实例化方法
            Myclass mc = new Myclass();

            NumberChanger nc2 = new NumberChanger(mc.AddNum);
            nc2(35);
            Console.WriteLine("Value of Num:{0}", mc.num);

            NumberChanger nc3 = new NumberChanger(mc.MutliNum);
            nc3(10);
            Console.WriteLine("Value of Num:{0}",mc.num);
            Console.ReadLine();
        }
        public static int AddNum(int p)
        {
            num += p;
            return num;
        }

    }
    class Myclass
    {
        public int num = 10;
        public int AddNum(int p)
        {
            num += p;
            return num;
        }
        public int MutliNum(int p)
        {
            num *= p;
            return num;
        }
    }
}

//二.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Delegate
{
    delegate void D(int x);
    class Program
    {
        static void Main(string[] args)
        {
            D cd1 = new D(C.M1);
            cd1(-1);
            Console.WriteLine();
            D cd2 = new D(C.M2);
            cd2(-2);
            Console.WriteLine();
            D cd3 = cd1 + cd2;
            cd3(3);
            Console.WriteLine();

            C c = new C();
            D cd4 = new D(c.M3);
            cd3 += cd4;
            cd3(4);
            Console.WriteLine();
            cd3 += cd1;
            cd3(5);
            Console.WriteLine();
            //委托绑定和解绑是栈式模型
            //顺序是可以改变的，没有绑定的话程序会报错
            cd3 -= cd1;
            cd3 -= cd2;
            cd3 -= cd1;
            cd3 -= cd4;
            cd3(1);
            //没有委托亦可以继续减，不会报错
            cd3 -= cd1;
            Console.ReadLine();
        }
    }
    class C
    {
        public static void M1(int i)
        {
            Console.WriteLine("C.M1 "+i);
        }
        public static void M2(int i)
        {
            Console.WriteLine("C.M2 "+i);
        }
        public  void M3(int i)
        {
            Console.WriteLine("C.M3 "+i);
        }
    }
}

